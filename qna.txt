1. 궁금한 것

인텔리제이
 - 톰캣 서버 재시작 없이 소스 반영 ?
   > 서버 설정 외에 하는 것 있나? 잘 안바뀜
 - STS 와 같이 servlet, context xml 파일 이름을 바꿔주는지 그 외에도 파일 이름 같은거 처리

스프링
 - 스프링 버전은 ?
 - 자바 설정 시 (jsp, html 설정? 두개 다 쓰는지 또는 쓰는 방법?)
 - 부트스트랩 사용하는지 (css)
 - controller - service - dao - mapper 방식 책과 실무가 비슷한지 (패키지 구성이 다른지)
 - Test 코드는 어디까지 작성 하는지 (controller, service, mapper 다? )
 - http - get, post, put,delete? 사용하나?
 - ajax 통신/ form 전송? 자주 사용하는것?



1. RootConfig(applicationContext.xml) 와 ServletConfig(dispatcher-servlet.xml, servlet-context.xml) 에서 왜 컴포넌트 스캔을 다르게 설정하는지?

* context 란
Bean의 확장 버전으로, Spring이 Bean을 좀 더 다루기 쉽도록 기능들이 추가된 공간이다.


이유1.
1. 공통 부분(ROOT-Context) == applicationContext
: 모든 서블릿이 공유할 수 있는 Bean들이 모인 공간을 말한다.
DB와 관련된 Repository나, Service 등이 있다.

2. 개별 부분(Servlet-Context) == dispacherServlet
: 서블릿 각자의 Bean들이 모인 공간이다.
웹 앱마다 한개씩 존재하므로, 웹 앱 그 자체를 의미하기도 한다.
이 컨텍스트 내의 Bean들은 서로 공유될 수 없다.
MVC의 Controller(서블릿)이 이에 해당한다.



이유2.
Transaction(ACID - 원자성, 일관성, 격리, 영속성)을 적용하기 위해서.
> 스프링 트랜잭션은 AOP를 이용해서 해당 빈의 proxy를 만들어서 tx가 적용되는 Bean을 바꿔치기한다.
  그럼 원래 @Service(또는 @Transactional) 어노테이션이 붙은 빈은 숨고 tx가 적용된 proxy bean이 @Service가 붙은 bean으로 대치된다.

> 만약 Application Context 와 Servlet Context가 모든 타입의 컴포넌트를 풀 스캔할 경우, tx설정은 Application Context에만 적용되기 때문에
  Application Context 의 @Service는 트랜잭션 적용이 되지만 Servlet Context 의 @Service 는 트랜잭션 적용이 안된다.

> Bean객체는 Servlet Context 가 우선되므로, @Controller가 동작하여 같은 Context 안에서 검색을 하고, @Service가 지정된 bean이 있으므로 이 bean을 사용한다.
  이 @Service가 지정된 bean은 트랜잭션 적용이 안 되어 있어 트랜잭션 처리가 안된다.

* Transaction은 applicationContext 만 동작 하고 servlet Context 에서는 적용안됨



2. DispatcherServlet이 하는 역할은 무엇인가?
- Spring Container (servlet context)를 생성한다.
- 클라이언트의 요청을 Handler(Controller)에 보낸다
  > 1) HandlerMapping, 2) HandlerAdapter (controller), ViewResolver

- Servlet Container 의 역할
- 웹서버와의 통신
- 서블릿 생명주기 관리
- 멀티쓰레드 지원 및 관리

- Servlet-Context
  > Servlet 단위로 생성되는 Context
  > Application Context를 자신의 부모 Context로 사용한다.
    (Servlet Context에 정된 Bean은 Application Context Bean을 사용할 수 있다.)
  > Bean 찾는 순서
    Servlet Context를 먼저 찾고 그 다음 Application Context를 찾는다.
    (같은 bean이 설정 되어 있다면 Servlet에 설정된 bean을 사용.)



2-1. root-context.xml의 역할

- Application Context
  > Web Application 최상단에 있는 Context
  > Spring 에서 BeanFactory를 상속 받고 있는 Context
  > Servlet과 관련 없는 설정을 한다 (@Service, @Mapper, @Configuration)
  > 서로 다른 Servlet에서 공통적으로 공유해서 사용가능
  > Application Context에 정의된 Bean은 Servlet Context에 정의 된 Bean을 사용할수 없다.

- 공통적으로 사용하는 Bean을 등록 (DB)



3. WebConfig(web.xml)이 하는 역할이 무엇인가?
Deployment Descriptor(배포 서술자)
- web.xml (웹 애플리케이션 마다 하나씩만 존재)
- web application의 기본 설정 (WAS가 최초로 구동 될 때 읽음.)
- 스프링 환경 설정 파일 로딩 (dispatcherServlet.xml, root-context.xml)
- Deploy 할 때 Servlet 정보를 매핑 설정한다.
  > Servlet은 웹프로그래밍에서 클라이언트의 요청을 처리하고 그 결과를 다시 클라이언트에게 전송하는 역할





@Component는 클래스를 빈으로 등록할때 사용
@Component는 Class Level에서, @Bean은 Method Level에서 적용된다.

@Bean은 사용자가 컨트롤 하지 못하는 Class나, 좀 더 유연하게 객체를 생성해서 넘기고 싶을 때 (이를 테면 외부 라이브러리),
@Component는 Class 자체를 빈으로 등록하고 싶을 때, 사용하면 된다고 이해했다.

Bean으로 등록되면
객체를 스프링 컨테이너가 빈으로 활용함



static 변수는 어떠한 인스턴스에서도 동일한 값을 사용해야할 때 사용된다


static method
메소드 앞에 static이 붙으면 static 메소드가 되는데 static이 붙을 경우 main 메소드에서 클래스를 통해 호출이 가능하다.
일반적으로 이러한 static 메소드는 유틸리티 성 메소드 작성에 많이 사용한다.
예를 들어 날짜를 구하거나 포맷을 지정한다던가 하는 반복적이고 형식적 작업을 하는 경우 많이 사용하게 된다.
사용시 주의할 점으로는 static으로 선언된 메소드에서는 인스턴스 변수에 접근할 수 없다는 것이다.
static 메소드에서는 static 변수만 접근이 가능하기 때문에 사용에 유의해야한다.



--------------------------

질문
 - H2 인메모리 DB 테스트 할때 @Test 한번 할때도 데이터가 없어지는지
 -

 스프링 시큐리티
 - Spring Security는 Spring 기반의 애플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 스프링 하위 프레임워크이다.
 Spring Security는 '인증'과 '권한'에 대한 부분을 Filter 흐름에 따라 처리하고 있다.
 Filter는 Dispatcher Servlet으로 가기 전에 적용되므로 가장 먼저 URL 요청을 받지만,
 Interceptor는 Dispatcher와 Controller사이에 위치한다는 점에서 적용 시기의 차이가 있다.
 Spring Security는 보안과 관련해서 체계적으로 많은 옵션을 제공해주기 때문에 개발자 입장에서는 일일이 보안관련 로직을 작성하지 않아도 된다는 장점이 있다.



[ SecurityContextHolder ]
SecurityContextHolder는 보안 주체의 세부 정보를 포함하여 응용프래그램의 현재 보안 컨텍스트에 대한 세부 정보가 저장된다.
SecurityContextHolder는 기본적으로 SecurityContextHolder.MODE_INHERITABLETHREADLOCAL 방법과SecurityContextHolder.MODE_THREADLOCAL 방법을 제공한다.



[ SecurityContext ]
Authentication을 보관하는 역할을 하며, SecurityContext를 통해 Authentication 객체를 꺼내올 수 있다.



[ Authentication ]
Authentication는 현재 접근하는 주체의 정보와 권한을 담는 인터페이스이다.
Authentication 객체는 Security Context에 저장되며, SecurityContextHolder를 통해 SecurityContext에 접근하고, SecurityContext를 통해 Authentication에 접근할 수 있다.


[ UsernamePasswordAuthenticationToken ]
UsernamePasswordAuthenticationToken은 Authentication을 implements한 AbstractAuthenticationToken의 하위 클래스로,
User의 ID가 Principal 역할을 하고, Password가 Credential의 역할을 한다. UsernamePasswordAuthenticationToken의 첫 번째 생성자는 인증 전의 객체를 생성하고,
두번째 생성자는 인증이 완려된 객체를 생성한다.



[ AuthenticationProvider ]
AuthenticationProvider에서는 실제 인증에 대한 부분을 처리하는데, 인증 전의 Authentication객체를 받아서 인증이 완료된 객체를 반환하는 역할을 한다.
아래와 같은 AuthenticationProvider 인터페이스를 구현해서 Custom한 AuthenticationProvider을 작성해서 AuthenticationManager에 등록하면 된다.



[ Authentication Manager ]
인증에 대한 부분은 SpringSecurity의 AuthenticatonManager를 통해서 처리하게 되는데, 실질적으로는 AuthenticationManager에 등록된 AuthenticationProvider에 의해 처리된다.
인증이 성공하면 2번째 생성자를 이용해 인증이 성공한(isAuthenticated=true) 객체를 생성하여 Security Context에 저장한다.
그리고 인증 상태를 유지하기 위해 세션에 보관하며, 인증이 실패한 경우에는 AuthenticationException를 발생시킨다.

AuthenticationManager를 implements한 ProviderManager는 실제 인증 과정에 대한 로직을 가지고 있는 AuthenticaionProvider를 List로 가지고 있으며,
ProividerManager는 for문을 통해 모든 provider를 조회하면서 authenticate 처리를 한다.

위에서 설명한 ProviderManager에 우리가 직접 구현한 CustomAuthenticationProvider를 등록하는 방법은 WebSecurityConfigurerAdapter를 상속해 만든 SecurityConfig에서 할 수 있다.
WebSecurityConfigurerAdapter의 상위 클래스에서는 AuthenticationManager를 가지고 있기 때문에 우리가 직접 만든 CustomAuthenticationProvider를 등록할 수 있다.



[ UserDetails ]
인증에 성공하여 생성된 UserDetails 객체는 Authentication객체를 구현한 UsernamePasswordAuthenticationToken을 생성하기 위해 사용된다.
UserDetails 인터페이스를 살펴보면 아래와 같이 정보를 반환하는 메소드를 가지고 있다.
UserDetails 인터페이스의 경우 직접 개발한 UserVO 모델에 UserDetails를 implements하여 이를 처리하거나 UserDetailsVO에 UserDetails를 implements하여 처리할 수 있다.



[ UserDetailsService ]
UserDetailsService 인터페이스는 UserDetails 객체를 반환하는 단 하나의 메소드를 가지고 있는데,
일반적으로 이를 구현한 클래스의 내부에 UserRepository를 주입받아 DB와 연결하여 처리한다. UserDetails 인터페이스는 아래와 같다.



[ Password Encoding ]
AuthenticationManagerBuilder.userDetailsService().passwordEncoder() 를 통해 패스워드 암호화에 사용될 PasswordEncoder 구현체를 지정할 수 있다.



[ GrantedAuthority ]
GrantAuthority는 현재 사용자(principal)가 가지고 있는 권한을 의미한다. ROLE_ADMIN나 ROLE_USER와 같이 ROLE_*의 형태로 사용하며,
보통 "roles" 이라고 한다. GrantedAuthority 객체는 UserDetailsService에 의해 불러올 수 있고, 특정 자원에 대한 권한이 있는지를 검사하여 접근 허용 여부를 결정한다.




======================Spring Security ==============================

1. 필터를 이용해 스프링 동작 하도록 설정 (web.xml)
    - springSecurityFilterChain (filter)

2. 접근제한 설정 (securityContext.xml)

3. UserDetailsService 를 통해 인증과 권한을 처리함.

4. PasswordEncoder 존재

5. AccessDeniedHandler
    > Controller 에서 처리 (CustomAccessDeniedHandler 를 구현 가능 implement AccessDeniedHandler !)

6. custom Login Page (CommonController 에서서 처리
    > CSRF 토큰 (사이트간 위조방지)  세션을 통해 보관 스프링 시큐리티에서는 사용을 안하거나 쿠키로 관리

7. AuthenticationSuccessHandler (로그인 성공 시)
    > security-context 에 bean으로 등록

8. LogoutSuccessHandler
    > security-context 에 bean으로 등록
    > CommonController 에서 처리

=========================================================================================================



1. 스프링 시큐리티 란 ?  https://sjh836.tistory.com/165, https://okky.kr/article/382738

> 스프링 기반의 애플리케이션 보안 (인증과 권한, 인가등) 을 처리하는 스프링 하위 프레임워크 !
> 스프링 시큐리티는 필터와 인터셉터로 구성되어 있고, 필터는 서블릿 자원을 사용하고 인터셉터는 스프링 빈으로 관리되며 스프링의 컨텍스트에 속한다.
> 필터는 요청에 대한 응답 인터셉터는 요청의 전후 의 처리
> 서블릿 필터와 이들로 구성된 필터체인으로 구성됨


접근 주체 : 보호된 대상에 접근하는 유저
인증 : 현재 유저가 누구인지 확인
인가 : 현재 유저가 어떤 서비스, 페이지에 접근 할수 있는 권한이 있는지 확인
권한 : 인증된 주체가 애플리케이션의 동작을 수행할 수 있도록 허락


인증은 애플리케이션의 작업을 수행할 수 있는 주체(사용자)라고 주장할 수 있는 것을 말하며
권한은 인증된 주체가 애플리케이션의 동작을 수행할 수 있도록 허락되있는지를 결정하는 것을 말합니다.
따라서, 권한 승인이 필요한 부분으로 접근하려면 인증 과정을 통해 주체가 증명 되어야만 한다는 것입니다.


원래 XML 기반의 설정에서는 web.xml에 org.springframework.web.filter.DelegatingFilterProxy라는 springSecurityFilterChain을 등록하는 것으로 시작합니다만,
자바 기반의 설정에서는 WebSecurityConfigurerAdapter를 상속받은 클래스에 @EnableWebSecurity 어노테이션을 명시하는 것만으로도 springSecurityFilterChain가 자동으로 포함되어집니다.

그리고 포함된 springSecurityFilterChain을 등록하기 위해서는 AbstractSecurityWebApplicationInitializer를 상속받은 WebApplicationInitializer class를 만들어두면 됩니다.



=====================================================================================

Java 설정
> SecurityIntializer extends AbstractSecurityWebApplicationInitializer 추가

// 로그인 페이지 관련 설정
> SecurityConfig extends WebSecurityConfigureAdapter 추가
    - configure(HttpSecurity http) 추가

> WebConfig에 SecuriyConfig.class 추가

// 로그인 성공 처리
> CustomLoginSuccessHandler.java 추가 (SecurityConfig에도 추가 - AuthenticationSuccessHandler 추가  )
    - configure(HttpSecurity http) 추가

// 로그아웃 처리
> configure(HttpSecurity http) 추가

//PasswordEncoder 지정
> SecurityConfig (PasswordEncoder bean 추가)

//
> CustomDetailsService 설정

@Secured(ROLE_ADMIN)
@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
@PostAuthorize


=============================================================

hasRole([role]) : 현재 사용자의 권한이 파라미터의 권한과 동일한 경우 true
hasAnyRole([role1,role2]) : 현재 사용자의 권한이 파라미터의 권한 중 일치하는 것이 있는 경우 true
principal : 사용자를 증명하는 주요객체(User)를 직접 접근할 수 있다.
authentication : SecurityContext에 있는 authentication 객체에 접근 할 수 있다.
permitAll : 모든 접근 허용
denyAll : 모든 접근 비허용
isAnonymous() : 현재 사용자가 익명(비로그인)인 상태인 경우 true
isRememberMe() : 현재 사용자가 RememberMe 사용자라면 true
isAuthenticated() : 현재 사용자가 익명이 아니라면 (로그인 상태라면) true
isFullyAuthenticated() : 현재 사용자가 익명이거나 RememberMe 사용자가 아니라면 true


@ResponseBody 는 객체를 JSON으로 변환해서 브라우저로 전달


스프링 시큐리티 구현 부 확인 (Impl)
